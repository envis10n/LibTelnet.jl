using LibTelnet
using Test

const test_data::Vector{UInt8} = [0xff, 0xfd, 0xc9, 0xff, 0xfa, 0xc9, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x7b, 0x22, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x22, 0x30, 0x2e, 0x31, 0x2e, 0x36, 0x22, 0x2c, 0x22, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x22, 0x44, 0x65, 0x6e, 0x6f, 0x54, 0x65, 0x6c, 0x20, 0x28, 0x44, 0x65, 0x6e, 0x6f, 0x29, 0x22, 0x7d, 0xff, 0xf0]

@testset "Parser" begin
    input::Vector{UInt8} = Vector{UInt8}(undef, length(test_data))
    copy!(input, test_data)
    res = LibTelnet.Parser.parse(input)
    @test length(res) == 2
    @test res[1] == [0xff, 0xfd, 0xc9]
    @test res[2] == [0xff, 0xfa, 0xc9, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x7b, 0x22, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x22, 0x30, 0x2e, 0x31, 0x2e, 0x36, 0x22, 0x2c, 0x22, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x22, 0x44, 0x65, 0x6e, 0x6f, 0x54, 0x65, 0x6c, 0x20, 0x28, 0x44, 0x65, 0x6e, 0x6f, 0x29, 0x22, 0x7d, 0xff, 0xf0]
end